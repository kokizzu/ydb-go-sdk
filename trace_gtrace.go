// Code generated by gtrace. DO NOT EDIT.

package ydb

import (
	"context"
)

// Compose returns a new DriverTrace which has functional fields composed
// both from t and x.
func (t DriverTrace) Compose(x DriverTrace) (ret DriverTrace) {
	switch {
	case t.OnDial == nil:
		ret.OnDial = x.OnDial
	case x.OnDial == nil:
		ret.OnDial = t.OnDial
	default:
		h1 := t.OnDial
		h2 := x.OnDial
		ret.OnDial = func(d DialStartInfo) func(DialDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d DialDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	switch {
	case t.OnGetConn == nil:
		ret.OnGetConn = x.OnGetConn
	case x.OnGetConn == nil:
		ret.OnGetConn = t.OnGetConn
	default:
		h1 := t.OnGetConn
		h2 := x.OnGetConn
		ret.OnGetConn = func(g GetConnStartInfo) func(GetConnDoneInfo) {
			r1 := h1(g)
			r2 := h2(g)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(g GetConnDoneInfo) {
					r1(g)
					r2(g)
				}
			}
		}
	}
	switch {
	case t.OnPessimization == nil:
		ret.OnPessimization = x.OnPessimization
	case x.OnPessimization == nil:
		ret.OnPessimization = t.OnPessimization
	default:
		h1 := t.OnPessimization
		h2 := x.OnPessimization
		ret.OnPessimization = func(p PessimizationStartInfo) func(PessimizationDoneInfo) {
			r1 := h1(p)
			r2 := h2(p)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(p PessimizationDoneInfo) {
					r1(p)
					r2(p)
				}
			}
		}
	}
	switch {
	case t.TrackConnStart == nil:
		ret.TrackConnStart = x.TrackConnStart
	case x.TrackConnStart == nil:
		ret.TrackConnStart = t.TrackConnStart
	default:
		h1 := t.TrackConnStart
		h2 := x.TrackConnStart
		ret.TrackConnStart = func(t TrackConnStartInfo) {
			h1(t)
			h2(t)
		}
	}
	switch {
	case t.TrackConnDone == nil:
		ret.TrackConnDone = x.TrackConnDone
	case x.TrackConnDone == nil:
		ret.TrackConnDone = t.TrackConnDone
	default:
		h1 := t.TrackConnDone
		h2 := x.TrackConnDone
		ret.TrackConnDone = func(t TrackConnDoneInfo) {
			h1(t)
			h2(t)
		}
	}
	switch {
	case t.OnGetCredentials == nil:
		ret.OnGetCredentials = x.OnGetCredentials
	case x.OnGetCredentials == nil:
		ret.OnGetCredentials = t.OnGetCredentials
	default:
		h1 := t.OnGetCredentials
		h2 := x.OnGetCredentials
		ret.OnGetCredentials = func(g GetCredentialsStartInfo) func(GetCredentialsDoneInfo) {
			r1 := h1(g)
			r2 := h2(g)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(g GetCredentialsDoneInfo) {
					r1(g)
					r2(g)
				}
			}
		}
	}
	switch {
	case t.OnDiscovery == nil:
		ret.OnDiscovery = x.OnDiscovery
	case x.OnDiscovery == nil:
		ret.OnDiscovery = t.OnDiscovery
	default:
		h1 := t.OnDiscovery
		h2 := x.OnDiscovery
		ret.OnDiscovery = func(d DiscoveryStartInfo) func(DiscoveryDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d DiscoveryDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	switch {
	case t.OnOperation == nil:
		ret.OnOperation = x.OnOperation
	case x.OnOperation == nil:
		ret.OnOperation = t.OnOperation
	default:
		h1 := t.OnOperation
		h2 := x.OnOperation
		ret.OnOperation = func(o OperationStartInfo) func(OperationDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OperationDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnOperationWait == nil:
		ret.OnOperationWait = x.OnOperationWait
	case x.OnOperationWait == nil:
		ret.OnOperationWait = t.OnOperationWait
	default:
		h1 := t.OnOperationWait
		h2 := x.OnOperationWait
		ret.OnOperationWait = func(o OperationWaitInfo) {
			h1(o)
			h2(o)
		}
	}
	switch {
	case t.OnStream == nil:
		ret.OnStream = x.OnStream
	case x.OnStream == nil:
		ret.OnStream = t.OnStream
	default:
		h1 := t.OnStream
		h2 := x.OnStream
		ret.OnStream = func(s StreamStartInfo) func(StreamDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s StreamDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	switch {
	case t.OnStreamRecv == nil:
		ret.OnStreamRecv = x.OnStreamRecv
	case x.OnStreamRecv == nil:
		ret.OnStreamRecv = t.OnStreamRecv
	default:
		h1 := t.OnStreamRecv
		h2 := x.OnStreamRecv
		ret.OnStreamRecv = func(s StreamRecvStartInfo) func(StreamRecvDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s StreamRecvDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	return ret
}

type driverTraceContextKey struct{}

// WithDriverTrace returns context which has associated DriverTrace with it.
func WithDriverTrace(ctx context.Context, t DriverTrace) context.Context {
	return context.WithValue(ctx,
		driverTraceContextKey{},
		ContextDriverTrace(ctx).Compose(t),
	)
}

// ContextDriverTrace returns DriverTrace associated with ctx.
// If there is no DriverTrace associated with ctx then zero value
// of DriverTrace is returned.
func ContextDriverTrace(ctx context.Context) DriverTrace {
	t, _ := ctx.Value(driverTraceContextKey{}).(DriverTrace)
	return t
}

func (t DriverTrace) onDial(ctx context.Context, d DialStartInfo) func(DialDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(DialStartInfo) func(DialDoneInfo)
	switch {
	case t.OnDial == nil:
		fn = c.OnDial
	case c.OnDial == nil:
		fn = t.OnDial
	default:
		h1 := t.OnDial
		h2 := c.OnDial
		fn = func(d DialStartInfo) func(DialDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d DialDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	if fn == nil {
		return func(DialDoneInfo) {
			return
		}
	}
	res := fn(d)
	if res == nil {
		return func(DialDoneInfo) {
			return
		}
	}
	return res
}
func (t DriverTrace) onGetConn(ctx context.Context, g GetConnStartInfo) func(GetConnDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(GetConnStartInfo) func(GetConnDoneInfo)
	switch {
	case t.OnGetConn == nil:
		fn = c.OnGetConn
	case c.OnGetConn == nil:
		fn = t.OnGetConn
	default:
		h1 := t.OnGetConn
		h2 := c.OnGetConn
		fn = func(g GetConnStartInfo) func(GetConnDoneInfo) {
			r1 := h1(g)
			r2 := h2(g)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(g GetConnDoneInfo) {
					r1(g)
					r2(g)
				}
			}
		}
	}
	if fn == nil {
		return func(GetConnDoneInfo) {
			return
		}
	}
	res := fn(g)
	if res == nil {
		return func(GetConnDoneInfo) {
			return
		}
	}
	return res
}
func (t DriverTrace) onPessimization(ctx context.Context, p PessimizationStartInfo) func(PessimizationDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(PessimizationStartInfo) func(PessimizationDoneInfo)
	switch {
	case t.OnPessimization == nil:
		fn = c.OnPessimization
	case c.OnPessimization == nil:
		fn = t.OnPessimization
	default:
		h1 := t.OnPessimization
		h2 := c.OnPessimization
		fn = func(p PessimizationStartInfo) func(PessimizationDoneInfo) {
			r1 := h1(p)
			r2 := h2(p)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(p PessimizationDoneInfo) {
					r1(p)
					r2(p)
				}
			}
		}
	}
	if fn == nil {
		return func(PessimizationDoneInfo) {
			return
		}
	}
	res := fn(p)
	if res == nil {
		return func(PessimizationDoneInfo) {
			return
		}
	}
	return res
}
func (t DriverTrace) trackConnStart(ctx context.Context, t1 TrackConnStartInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(TrackConnStartInfo)
	switch {
	case t.TrackConnStart == nil:
		fn = c.TrackConnStart
	case c.TrackConnStart == nil:
		fn = t.TrackConnStart
	default:
		h1 := t.TrackConnStart
		h2 := c.TrackConnStart
		fn = func(t TrackConnStartInfo) {
			h1(t)
			h2(t)
		}
	}
	if fn == nil {
		return
	}
	fn(t1)
}
func (t DriverTrace) trackConnDone(ctx context.Context, t1 TrackConnDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(TrackConnDoneInfo)
	switch {
	case t.TrackConnDone == nil:
		fn = c.TrackConnDone
	case c.TrackConnDone == nil:
		fn = t.TrackConnDone
	default:
		h1 := t.TrackConnDone
		h2 := c.TrackConnDone
		fn = func(t TrackConnDoneInfo) {
			h1(t)
			h2(t)
		}
	}
	if fn == nil {
		return
	}
	fn(t1)
}
func (t DriverTrace) onGetCredentials(ctx context.Context, g GetCredentialsStartInfo) func(GetCredentialsDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(GetCredentialsStartInfo) func(GetCredentialsDoneInfo)
	switch {
	case t.OnGetCredentials == nil:
		fn = c.OnGetCredentials
	case c.OnGetCredentials == nil:
		fn = t.OnGetCredentials
	default:
		h1 := t.OnGetCredentials
		h2 := c.OnGetCredentials
		fn = func(g GetCredentialsStartInfo) func(GetCredentialsDoneInfo) {
			r1 := h1(g)
			r2 := h2(g)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(g GetCredentialsDoneInfo) {
					r1(g)
					r2(g)
				}
			}
		}
	}
	if fn == nil {
		return func(GetCredentialsDoneInfo) {
			return
		}
	}
	res := fn(g)
	if res == nil {
		return func(GetCredentialsDoneInfo) {
			return
		}
	}
	return res
}
func (t DriverTrace) onDiscovery(ctx context.Context, d DiscoveryStartInfo) func(DiscoveryDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(DiscoveryStartInfo) func(DiscoveryDoneInfo)
	switch {
	case t.OnDiscovery == nil:
		fn = c.OnDiscovery
	case c.OnDiscovery == nil:
		fn = t.OnDiscovery
	default:
		h1 := t.OnDiscovery
		h2 := c.OnDiscovery
		fn = func(d DiscoveryStartInfo) func(DiscoveryDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d DiscoveryDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	if fn == nil {
		return func(DiscoveryDoneInfo) {
			return
		}
	}
	res := fn(d)
	if res == nil {
		return func(DiscoveryDoneInfo) {
			return
		}
	}
	return res
}
func (t DriverTrace) onOperation(ctx context.Context, o OperationStartInfo) func(OperationDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(OperationStartInfo) func(OperationDoneInfo)
	switch {
	case t.OnOperation == nil:
		fn = c.OnOperation
	case c.OnOperation == nil:
		fn = t.OnOperation
	default:
		h1 := t.OnOperation
		h2 := c.OnOperation
		fn = func(o OperationStartInfo) func(OperationDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OperationDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	if fn == nil {
		return func(OperationDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OperationDoneInfo) {
			return
		}
	}
	return res
}
func (t DriverTrace) onOperationWait(ctx context.Context, o OperationWaitInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(OperationWaitInfo)
	switch {
	case t.OnOperationWait == nil:
		fn = c.OnOperationWait
	case c.OnOperationWait == nil:
		fn = t.OnOperationWait
	default:
		h1 := t.OnOperationWait
		h2 := c.OnOperationWait
		fn = func(o OperationWaitInfo) {
			h1(o)
			h2(o)
		}
	}
	if fn == nil {
		return
	}
	fn(o)
}
func (t DriverTrace) onStream(ctx context.Context, s StreamStartInfo) func(StreamDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(StreamStartInfo) func(StreamDoneInfo)
	switch {
	case t.OnStream == nil:
		fn = c.OnStream
	case c.OnStream == nil:
		fn = t.OnStream
	default:
		h1 := t.OnStream
		h2 := c.OnStream
		fn = func(s StreamStartInfo) func(StreamDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s StreamDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	if fn == nil {
		return func(StreamDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(StreamDoneInfo) {
			return
		}
	}
	return res
}
func (t DriverTrace) onStreamRecv(ctx context.Context, s StreamRecvStartInfo) func(StreamRecvDoneInfo) {
	c := ContextDriverTrace(ctx)
	var fn func(StreamRecvStartInfo) func(StreamRecvDoneInfo)
	switch {
	case t.OnStreamRecv == nil:
		fn = c.OnStreamRecv
	case c.OnStreamRecv == nil:
		fn = t.OnStreamRecv
	default:
		h1 := t.OnStreamRecv
		h2 := c.OnStreamRecv
		fn = func(s StreamRecvStartInfo) func(StreamRecvDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s StreamRecvDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	if fn == nil {
		return func(StreamRecvDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(StreamRecvDoneInfo) {
			return
		}
	}
	return res
}
func driverTraceOnDial(ctx context.Context, t DriverTrace, c context.Context, address string) func(_ context.Context, address string, _ error) {
	var p DialStartInfo
	p.Context = c
	p.Address = address
	res := t.onDial(ctx, p)
	return func(c context.Context, address string, e error) {
		var p DialDoneInfo
		p.Context = c
		p.Address = address
		p.Error = e
		res(p)
	}
}
func driverTraceOnGetConn(ctx context.Context, t DriverTrace, c context.Context) func(_ context.Context, address string, _ error) {
	var p GetConnStartInfo
	p.Context = c
	res := t.onGetConn(ctx, p)
	return func(c context.Context, address string, e error) {
		var p GetConnDoneInfo
		p.Context = c
		p.Address = address
		p.Error = e
		res(p)
	}
}
func driverTraceOnPessimization(ctx context.Context, t DriverTrace, c context.Context, address string, cause error) func(_ context.Context, address string, _ error) {
	var p PessimizationStartInfo
	p.Context = c
	p.Address = address
	p.Cause = cause
	res := t.onPessimization(ctx, p)
	return func(c context.Context, address string, e error) {
		var p PessimizationDoneInfo
		p.Context = c
		p.Address = address
		p.Error = e
		res(p)
	}
}
func driverTraceTrackConnStart(ctx context.Context, t DriverTrace, address string) {
	var p TrackConnStartInfo
	p.Address = address
	t.trackConnStart(ctx, p)
}
func driverTraceTrackConnDone(ctx context.Context, t DriverTrace, address string) {
	var p TrackConnDoneInfo
	p.Address = address
	t.trackConnDone(ctx, p)
}
func driverTraceOnGetCredentials(ctx context.Context, t DriverTrace, c context.Context) func(_ context.Context, token bool, _ error) {
	var p GetCredentialsStartInfo
	p.Context = c
	res := t.onGetCredentials(ctx, p)
	return func(c context.Context, token bool, e error) {
		var p GetCredentialsDoneInfo
		p.Context = c
		p.Token = token
		p.Error = e
		res(p)
	}
}
func driverTraceOnDiscovery(ctx context.Context, t DriverTrace, c context.Context, address string) func(_ context.Context, endpoints []Endpoint, _ error) {
	var p DiscoveryStartInfo
	p.Context = c
	p.Address = address
	res := t.onDiscovery(ctx, p)
	return func(c context.Context, endpoints []Endpoint, e error) {
		var p DiscoveryDoneInfo
		p.Context = c
		p.Endpoints = endpoints
		p.Error = e
		res(p)
	}
}
func driverTraceOnOperation(ctx context.Context, t DriverTrace, c context.Context, address string, m Method, params OperationParams) func(_ context.Context, address string, _ Method, params OperationParams, opID string, issues IssueIterator, _ error) {
	var p OperationStartInfo
	p.Context = c
	p.Address = address
	p.Method = m
	p.Params = params
	res := t.onOperation(ctx, p)
	return func(c context.Context, address string, m Method, params OperationParams, opID string, issues IssueIterator, e error) {
		var p OperationDoneInfo
		p.Context = c
		p.Address = address
		p.Method = m
		p.Params = params
		p.OpID = opID
		p.Issues = issues
		p.Error = e
		res(p)
	}
}
func driverTraceOnOperationWait(ctx context.Context, t DriverTrace, c context.Context, address string, m Method, params OperationParams, opID string) {
	var p OperationWaitInfo
	p.Context = c
	p.Address = address
	p.Method = m
	p.Params = params
	p.OpID = opID
	t.onOperationWait(ctx, p)
}
func driverTraceOnStream(ctx context.Context, t DriverTrace, c context.Context, address string, m Method) func(_ context.Context, address string, _ Method, _ error) {
	var p StreamStartInfo
	p.Context = c
	p.Address = address
	p.Method = m
	res := t.onStream(ctx, p)
	return func(c context.Context, address string, m Method, e error) {
		var p StreamDoneInfo
		p.Context = c
		p.Address = address
		p.Method = m
		p.Error = e
		res(p)
	}
}
func driverTraceOnStreamRecv(ctx context.Context, t DriverTrace, c context.Context, address string, m Method) func(_ context.Context, address string, _ Method, issues IssueIterator, _ error) {
	var p StreamRecvStartInfo
	p.Context = c
	p.Address = address
	p.Method = m
	res := t.onStreamRecv(ctx, p)
	return func(c context.Context, address string, m Method, issues IssueIterator, e error) {
		var p StreamRecvDoneInfo
		p.Context = c
		p.Address = address
		p.Method = m
		p.Issues = issues
		p.Error = e
		res(p)
	}
}
