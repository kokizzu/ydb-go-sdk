// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: ydb_experimental_v1.proto

package Ydb_Experimental_V1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	Ydb_Experimental "github.com/yandex-cloud/ydb-go-sdk/v2/internal/pb/protos/Ydb_Experimental"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExperimentalServiceClient is the client API for ExperimentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperimentalServiceClient interface {
	ExecuteStreamQuery(ctx context.Context, in *Ydb_Experimental.ExecuteStreamQueryRequest, opts ...grpc.CallOption) (ExperimentalService_ExecuteStreamQueryClient, error)
}

type experimentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentalServiceClient(cc grpc.ClientConnInterface) ExperimentalServiceClient {
	return &experimentalServiceClient{cc}
}

func (c *experimentalServiceClient) ExecuteStreamQuery(ctx context.Context, in *Ydb_Experimental.ExecuteStreamQueryRequest, opts ...grpc.CallOption) (ExperimentalService_ExecuteStreamQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExperimentalService_ServiceDesc.Streams[0], "/Ydb.Experimental.V1.ExperimentalService/ExecuteStreamQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &experimentalServiceExecuteStreamQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExperimentalService_ExecuteStreamQueryClient interface {
	Recv() (*Ydb_Experimental.ExecuteStreamQueryResponse, error)
	grpc.ClientStream
}

type experimentalServiceExecuteStreamQueryClient struct {
	grpc.ClientStream
}

func (x *experimentalServiceExecuteStreamQueryClient) Recv() (*Ydb_Experimental.ExecuteStreamQueryResponse, error) {
	m := new(Ydb_Experimental.ExecuteStreamQueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExperimentalServiceServer is the server API for ExperimentalService service.
// All implementations must embed UnimplementedExperimentalServiceServer
// for forward compatibility
type ExperimentalServiceServer interface {
	ExecuteStreamQuery(*Ydb_Experimental.ExecuteStreamQueryRequest, ExperimentalService_ExecuteStreamQueryServer) error
	mustEmbedUnimplementedExperimentalServiceServer()
}

// UnimplementedExperimentalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExperimentalServiceServer struct {
}

func (UnimplementedExperimentalServiceServer) ExecuteStreamQuery(*Ydb_Experimental.ExecuteStreamQueryRequest, ExperimentalService_ExecuteStreamQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteStreamQuery not implemented")
}
func (UnimplementedExperimentalServiceServer) mustEmbedUnimplementedExperimentalServiceServer() {}

// UnsafeExperimentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperimentalServiceServer will
// result in compilation errors.
type UnsafeExperimentalServiceServer interface {
	mustEmbedUnimplementedExperimentalServiceServer()
}

func RegisterExperimentalServiceServer(s grpc.ServiceRegistrar, srv ExperimentalServiceServer) {
	s.RegisterService(&ExperimentalService_ServiceDesc, srv)
}

func _ExperimentalService_ExecuteStreamQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ydb_Experimental.ExecuteStreamQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExperimentalServiceServer).ExecuteStreamQuery(m, &experimentalServiceExecuteStreamQueryServer{stream})
}

type ExperimentalService_ExecuteStreamQueryServer interface {
	Send(*Ydb_Experimental.ExecuteStreamQueryResponse) error
	grpc.ServerStream
}

type experimentalServiceExecuteStreamQueryServer struct {
	grpc.ServerStream
}

func (x *experimentalServiceExecuteStreamQueryServer) Send(m *Ydb_Experimental.ExecuteStreamQueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ExperimentalService_ServiceDesc is the grpc.ServiceDesc for ExperimentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperimentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ydb.Experimental.V1.ExperimentalService",
	HandlerType: (*ExperimentalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteStreamQuery",
			Handler:       _ExperimentalService_ExecuteStreamQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ydb_experimental_v1.proto",
}
