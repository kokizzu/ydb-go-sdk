// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ydb_persqueue_v1.proto
// This is semi-auto generated, plz note that this cannot be generated over standard _make macross
// Since same namespace used for both service and proto model files (grpc/draft and proto dirs).
// it will emit an error:
// kikimr/public/sdk/go/ydb/internal/cmd/make/make -import="/arcadia /arcadia/contrib/libs/protobuf/src"
//	-source="/arcadia/kikimr/public/api/protos /arcadia/kikimr/public/api/grpc/draft"
//	-source-base=~/arcadia -strip=~/arcadia/kikimr/public/api
//	-destination=kikimr/public/sdk/go/ydb/api
//	-repository=github.com/yandex-cloud/ydb-go-sdk/v2/api
//	-compiler=contrib/tools/protoc/protoc
//	-custom=kikimr/public/sdk/go/ydb/internal/cmd/protoc-gen/protoc-gen
//	-plugins=ydb
// warning: ignoring pacakge "Ydb.PersQueue.V1" because it belongs to at least these two directories:
//  /arcadia/kikimr/public/api/protos
//  /arcadia/kikimr/public/api/grpc/draft
// TODO: Fix after LOGBROKER-6598

package Ydb_PersQueue_V1

import (
	context "context"
	fmt "fmt"
	math "math"

	Ydb_PersQueue_ClusterDiscovery "github.com/yandex-cloud/ydb-go-sdk/v2/api/protos/Ydb_PersQueue_ClusterDiscovery"
	Ydb_Persqueue_V1 "github.com/yandex-cloud/ydb-go-sdk/v2/api/protos/Ydb_PersQueue_V1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("ydb_persqueue_v2.proto", fileDescriptor_1c7c5bcefea2730e) }

var fileDescriptor_1c7c5bcefea2730e = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4d, 0x8b, 0xd4, 0x30,
	0x18, 0xc7, 0xe9, 0x45, 0x31, 0xe2, 0x32, 0x44, 0x58, 0x61, 0xbc, 0xf8, 0xb2, 0xba, 0x7b, 0x31,
	0x75, 0x46, 0x44, 0x4f, 0xc2, 0x3a, 0x03, 0xe2, 0x61, 0x41, 0x67, 0x17, 0x17, 0x45, 0x18, 0xdb,
	0xe4, 0x71, 0x08, 0xdb, 0x36, 0xdd, 0x27, 0x69, 0xb1, 0x1f, 0xc0, 0x8b, 0x5f, 0x42, 0xfc, 0x96,
	0x1e, 0xa5, 0x9b, 0xa6, 0x3b, 0x7d, 0xa1, 0x1d, 0xaf, 0x79, 0x7e, 0xff, 0xdf, 0xf3, 0x87, 0x90,
	0x90, 0xfd, 0x42, 0x84, 0xeb, 0x14, 0x50, 0x5f, 0x66, 0x90, 0xc1, 0x3a, 0x9f, 0xb3, 0x14, 0x95,
	0x51, 0x74, 0xf2, 0x59, 0x84, 0xec, 0x03, 0xa0, 0xfe, 0x58, 0x9e, 0xb3, 0x4f, 0xf3, 0xe9, 0x9b,
	0x0b, 0x79, 0x21, 0x63, 0xf4, 0xd3, 0x2c, 0x8c, 0x24, 0xf7, 0x83, 0x54, 0xfa, 0x57, 0xa8, 0xf6,
	0x9b, 0x0a, 0x1e, 0x65, 0xda, 0x00, 0xae, 0x85, 0xd4, 0x5c, 0xe5, 0x80, 0x85, 0x35, 0x4e, 0xfd,
	0x1d, 0xf3, 0xf9, 0xcc, 0x06, 0xe6, 0xbf, 0x6f, 0x92, 0x49, 0xdd, 0xe0, 0x14, 0x30, 0x97, 0x1c,
	0x28, 0x92, 0xbd, 0x53, 0x83, 0x10, 0xc4, 0x32, 0xd9, 0x9c, 0xa3, 0x34, 0x40, 0x9f, 0xb1, 0x56,
	0xd5, 0x19, 0x6b, 0x12, 0x8b, 0x48, 0x42, 0x62, 0x4e, 0x40, 0xeb, 0x60, 0x03, 0xd3, 0x51, 0xbc,
	0xdc, 0x04, 0x58, 0xe1, 0x47, 0xde, 0x73, 0x8f, 0xfe, 0xf2, 0xc8, 0xfe, 0x89, 0xdc, 0x60, 0x60,
	0xa4, 0x4a, 0x6a, 0x78, 0x05, 0x81, 0xa0, 0x2f, 0xbb, 0xb6, 0x7e, 0xb2, 0x59, 0x62, 0xe7, 0x58,
	0xb7, 0xcc, 0x57, 0x72, 0xf7, 0x1d, 0x18, 0x3b, 0xd3, 0x5a, 0xaa, 0x44, 0xbf, 0x4f, 0xbe, 0x2b,
	0xfa, 0xb0, 0x6b, 0x2c, 0x99, 0x72, 0xb6, 0x82, 0xcb, 0x0c, 0xb4, 0x99, 0x3e, 0x1a, 0x42, 0x74,
	0xaa, 0x12, 0x0d, 0xf4, 0x1b, 0xb9, 0xb3, 0x04, 0xcd, 0x51, 0x86, 0x70, 0xa6, 0x52, 0xc9, 0xe9,
	0xd3, 0x6e, 0xa8, 0x01, 0x38, 0xf9, 0xe1, 0x28, 0x57, 0x6d, 0x38, 0x23, 0xb7, 0x96, 0xa8, 0x52,
	0x6b, 0xef, 0xa9, 0x54, 0x0f, 0x9d, 0xf9, 0xf1, 0x20, 0x53, 0x59, 0xbf, 0x90, 0xdb, 0x0b, 0x84,
	0xc0, 0x54, 0xad, 0x0f, 0xba, 0x99, 0xad, 0xb1, 0x33, 0x3f, 0x19, 0xa1, 0x2a, 0xf7, 0x39, 0x21,
	0xc7, 0x91, 0x01, 0xb4, 0xea, 0x9e, 0x3a, 0xd7, 0x53, 0x67, 0x3e, 0x18, 0x86, 0xae, 0x4b, 0x1f,
	0x0b, 0x51, 0xde, 0xc1, 0x2a, 0x8b, 0xa0, 0xaf, 0xf4, 0xd6, 0x78, 0xa0, 0x74, 0x83, 0xaa, 0xdc,
	0x9c, 0xec, 0xad, 0x20, 0x56, 0x39, 0xd4, 0xfa, 0xc3, 0xbe, 0xeb, 0xdf, 0x26, 0xdc, 0x86, 0xa3,
	0x71, 0xd0, 0x2e, 0x99, 0xff, 0xf1, 0xc8, 0xbd, 0x85, 0x7d, 0xee, 0x4b, 0xf7, 0xda, 0xdd, 0x43,
	0xfd, 0xe9, 0x91, 0x89, 0x3b, 0xac, 0x18, 0x4d, 0x5f, 0xb5, 0xd4, 0xed, 0x30, 0x6b, 0x27, 0x5c,
	0xa7, 0xd7, 0xff, 0x1f, 0xb4, 0x1d, 0xdf, 0x3e, 0x20, 0xf7, 0xb9, 0x8a, 0x59, 0x11, 0x24, 0x02,
	0x7e, 0xb0, 0x42, 0x84, 0xac, 0xfe, 0x6a, 0x58, 0x3e, 0xfb, 0xeb, 0x79, 0xe1, 0x8d, 0xab, 0xef,
	0xe6, 0xc5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0x62, 0x43, 0x85, 0x0b, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PersQueueServiceClient is the client API for PersQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PersQueueServiceClient interface {
	StreamingWrite(ctx context.Context, opts ...grpc.CallOption) (PersQueueService_StreamingWriteClient, error)
	//*
	// Creates Read Session
	// Pipeline:
	// client                  server
	//         Init(Topics, ClientId, ...)
	//        ---------------->
	//         Init(SessionId)
	//        <----------------
	//         read1
	//        ---------------->
	//         read2
	//        ---------------->
	//         assign(Topic1, Cluster, Partition1, ...) - assigns and releases are optional
	//        <----------------
	//         assign(Topic2, Clutster, Partition2, ...)
	//        <----------------
	//         start_read(Topic1, Partition1, ...) - client must respond to assign request with this message. Only after this client will start recieving messages from this partition
	//        ---------------->
	//         release(Topic1, Partition1, ...)
	//        <----------------
	//         released(Topic1, Partition1, ...) - only after released server will give this parittion to other session.
	//        ---------------->
	//         start_read(Topic2, Partition2, ...) - client must respond to assign request with this message. Only after this client will start recieving messages from this partition
	//        ---------------->
	//         read data(data, ...)
	//        <----------------
	//         commit(cookie1)
	//        ---------------->
	//         committed(cookie1)
	//        <----------------
	//         issue(description, ...)
	//        <----------------
	MigrationStreamingRead(ctx context.Context, opts ...grpc.CallOption) (PersQueueService_MigrationStreamingReadClient, error)
	// Get information about reading
	GetReadSessionsInfo(ctx context.Context, in *Ydb_Persqueue_V1.ReadInfoRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.ReadInfoResponse, error)
	//
	// Describe topic command.
	DescribeTopic(ctx context.Context, in *Ydb_Persqueue_V1.DescribeTopicRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.DescribeTopicResponse, error)
	//
	// Drop topic command.
	DropTopic(ctx context.Context, in *Ydb_Persqueue_V1.DropTopicRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.DropTopicResponse, error)
	//
	// Create topic command.
	CreateTopic(ctx context.Context, in *Ydb_Persqueue_V1.CreateTopicRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.CreateTopicResponse, error)
	//
	// Alter topic command.
	AlterTopic(ctx context.Context, in *Ydb_Persqueue_V1.AlterTopicRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.AlterTopicResponse, error)
	//
	// Add read rule command.
	AddReadRule(ctx context.Context, in *Ydb_Persqueue_V1.AddReadRuleRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.AddReadRuleResponse, error)
	//
	// Remove read rule command.
	RemoveReadRule(ctx context.Context, in *Ydb_Persqueue_V1.RemoveReadRuleRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.RemoveReadRuleResponse, error)
}

type persQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersQueueServiceClient(cc grpc.ClientConnInterface) PersQueueServiceClient {
	return &persQueueServiceClient{cc}
}

func (c *persQueueServiceClient) StreamingWrite(ctx context.Context, opts ...grpc.CallOption) (PersQueueService_StreamingWriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersQueueService_serviceDesc.Streams[0], "/Ydb.PersQueue.V1.PersQueueService/StreamingWrite", opts...)
	if err != nil {
		return nil, err
	}
	x := &persQueueServiceStreamingWriteClient{stream}
	return x, nil
}

type PersQueueService_StreamingWriteClient interface {
	Send(*Ydb_Persqueue_V1.StreamingWriteClientMessage) error
	Recv() (*Ydb_Persqueue_V1.StreamingWriteServerMessage, error)
	grpc.ClientStream
}

type persQueueServiceStreamingWriteClient struct {
	grpc.ClientStream
}

func (x *persQueueServiceStreamingWriteClient) Send(m *Ydb_Persqueue_V1.StreamingWriteClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *persQueueServiceStreamingWriteClient) Recv() (*Ydb_Persqueue_V1.StreamingWriteServerMessage, error) {
	m := new(Ydb_Persqueue_V1.StreamingWriteServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persQueueServiceClient) MigrationStreamingRead(ctx context.Context, opts ...grpc.CallOption) (PersQueueService_MigrationStreamingReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PersQueueService_serviceDesc.Streams[1], "/Ydb.PersQueue.V1.PersQueueService/MigrationStreamingRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &persQueueServiceMigrationStreamingReadClient{stream}
	return x, nil
}

type PersQueueService_MigrationStreamingReadClient interface {
	Send(*Ydb_Persqueue_V1.MigrationStreamingReadClientMessage) error
	Recv() (*Ydb_Persqueue_V1.MigrationStreamingReadServerMessage, error)
	grpc.ClientStream
}

type persQueueServiceMigrationStreamingReadClient struct {
	grpc.ClientStream
}

func (x *persQueueServiceMigrationStreamingReadClient) Send(m *Ydb_Persqueue_V1.MigrationStreamingReadClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *persQueueServiceMigrationStreamingReadClient) Recv() (*Ydb_Persqueue_V1.MigrationStreamingReadServerMessage, error) {
	m := new(Ydb_Persqueue_V1.MigrationStreamingReadServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persQueueServiceClient) GetReadSessionsInfo(ctx context.Context, in *Ydb_Persqueue_V1.ReadInfoRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.ReadInfoResponse, error) {
	out := new(Ydb_Persqueue_V1.ReadInfoResponse)
	err := c.cc.Invoke(ctx, "/Ydb.PersQueue.V1.PersQueueService/GetReadSessionsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persQueueServiceClient) DescribeTopic(ctx context.Context, in *Ydb_Persqueue_V1.DescribeTopicRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.DescribeTopicResponse, error) {
	out := new(Ydb_Persqueue_V1.DescribeTopicResponse)
	err := c.cc.Invoke(ctx, "/Ydb.PersQueue.V1.PersQueueService/DescribeTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persQueueServiceClient) DropTopic(ctx context.Context, in *Ydb_Persqueue_V1.DropTopicRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.DropTopicResponse, error) {
	out := new(Ydb_Persqueue_V1.DropTopicResponse)
	err := c.cc.Invoke(ctx, "/Ydb.PersQueue.V1.PersQueueService/DropTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persQueueServiceClient) CreateTopic(ctx context.Context, in *Ydb_Persqueue_V1.CreateTopicRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.CreateTopicResponse, error) {
	out := new(Ydb_Persqueue_V1.CreateTopicResponse)
	err := c.cc.Invoke(ctx, "/Ydb.PersQueue.V1.PersQueueService/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persQueueServiceClient) AlterTopic(ctx context.Context, in *Ydb_Persqueue_V1.AlterTopicRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.AlterTopicResponse, error) {
	out := new(Ydb_Persqueue_V1.AlterTopicResponse)
	err := c.cc.Invoke(ctx, "/Ydb.PersQueue.V1.PersQueueService/AlterTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persQueueServiceClient) AddReadRule(ctx context.Context, in *Ydb_Persqueue_V1.AddReadRuleRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.AddReadRuleResponse, error) {
	out := new(Ydb_Persqueue_V1.AddReadRuleResponse)
	err := c.cc.Invoke(ctx, "/Ydb.PersQueue.V1.PersQueueService/AddReadRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persQueueServiceClient) RemoveReadRule(ctx context.Context, in *Ydb_Persqueue_V1.RemoveReadRuleRequest, opts ...grpc.CallOption) (*Ydb_Persqueue_V1.RemoveReadRuleResponse, error) {
	out := new(Ydb_Persqueue_V1.RemoveReadRuleResponse)
	err := c.cc.Invoke(ctx, "/Ydb.PersQueue.V1.PersQueueService/RemoveReadRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersQueueServiceServer is the server API for PersQueueService service.
type PersQueueServiceServer interface {
	StreamingWrite(PersQueueService_StreamingWriteServer) error
	//*
	// Creates Read Session
	// Pipeline:
	// client                  server
	//         Init(Topics, ClientId, ...)
	//        ---------------->
	//         Init(SessionId)
	//        <----------------
	//         read1
	//        ---------------->
	//         read2
	//        ---------------->
	//         assign(Topic1, Cluster, Partition1, ...) - assigns and releases are optional
	//        <----------------
	//         assign(Topic2, Clutster, Partition2, ...)
	//        <----------------
	//         start_read(Topic1, Partition1, ...) - client must respond to assign request with this message. Only after this client will start recieving messages from this partition
	//        ---------------->
	//         release(Topic1, Partition1, ...)
	//        <----------------
	//         released(Topic1, Partition1, ...) - only after released server will give this parittion to other session.
	//        ---------------->
	//         start_read(Topic2, Partition2, ...) - client must respond to assign request with this message. Only after this client will start recieving messages from this partition
	//        ---------------->
	//         read data(data, ...)
	//        <----------------
	//         commit(cookie1)
	//        ---------------->
	//         committed(cookie1)
	//        <----------------
	//         issue(description, ...)
	//        <----------------
	MigrationStreamingRead(PersQueueService_MigrationStreamingReadServer) error
	// Get information about reading
	GetReadSessionsInfo(context.Context, *Ydb_Persqueue_V1.ReadInfoRequest) (*Ydb_Persqueue_V1.ReadInfoResponse, error)
	//
	// Describe topic command.
	DescribeTopic(context.Context, *Ydb_Persqueue_V1.DescribeTopicRequest) (*Ydb_Persqueue_V1.DescribeTopicResponse, error)
	//
	// Drop topic command.
	DropTopic(context.Context, *Ydb_Persqueue_V1.DropTopicRequest) (*Ydb_Persqueue_V1.DropTopicResponse, error)
	//
	// Create topic command.
	CreateTopic(context.Context, *Ydb_Persqueue_V1.CreateTopicRequest) (*Ydb_Persqueue_V1.CreateTopicResponse, error)
	//
	// Alter topic command.
	AlterTopic(context.Context, *Ydb_Persqueue_V1.AlterTopicRequest) (*Ydb_Persqueue_V1.AlterTopicResponse, error)
	//
	// Add read rule command.
	AddReadRule(context.Context, *Ydb_Persqueue_V1.AddReadRuleRequest) (*Ydb_Persqueue_V1.AddReadRuleResponse, error)
	//
	// Remove read rule command.
	RemoveReadRule(context.Context, *Ydb_Persqueue_V1.RemoveReadRuleRequest) (*Ydb_Persqueue_V1.RemoveReadRuleResponse, error)
}

// UnimplementedPersQueueServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPersQueueServiceServer struct {
}

func (*UnimplementedPersQueueServiceServer) StreamingWrite(srv PersQueueService_StreamingWriteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingWrite not implemented")
}
func (*UnimplementedPersQueueServiceServer) MigrationStreamingRead(srv PersQueueService_MigrationStreamingReadServer) error {
	return status.Errorf(codes.Unimplemented, "method MigrationStreamingRead not implemented")
}
func (*UnimplementedPersQueueServiceServer) GetReadSessionsInfo(ctx context.Context, req *Ydb_Persqueue_V1.ReadInfoRequest) (*Ydb_Persqueue_V1.ReadInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadSessionsInfo not implemented")
}
func (*UnimplementedPersQueueServiceServer) DescribeTopic(ctx context.Context, req *Ydb_Persqueue_V1.DescribeTopicRequest) (*Ydb_Persqueue_V1.DescribeTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTopic not implemented")
}
func (*UnimplementedPersQueueServiceServer) DropTopic(ctx context.Context, req *Ydb_Persqueue_V1.DropTopicRequest) (*Ydb_Persqueue_V1.DropTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTopic not implemented")
}
func (*UnimplementedPersQueueServiceServer) CreateTopic(ctx context.Context, req *Ydb_Persqueue_V1.CreateTopicRequest) (*Ydb_Persqueue_V1.CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (*UnimplementedPersQueueServiceServer) AlterTopic(ctx context.Context, req *Ydb_Persqueue_V1.AlterTopicRequest) (*Ydb_Persqueue_V1.AlterTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTopic not implemented")
}
func (*UnimplementedPersQueueServiceServer) AddReadRule(ctx context.Context, req *Ydb_Persqueue_V1.AddReadRuleRequest) (*Ydb_Persqueue_V1.AddReadRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReadRule not implemented")
}
func (*UnimplementedPersQueueServiceServer) RemoveReadRule(ctx context.Context, req *Ydb_Persqueue_V1.RemoveReadRuleRequest) (*Ydb_Persqueue_V1.RemoveReadRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReadRule not implemented")
}

func RegisterPersQueueServiceServer(s *grpc.Server, srv PersQueueServiceServer) {
	s.RegisterService(&_PersQueueService_serviceDesc, srv)
}

func _PersQueueService_StreamingWrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersQueueServiceServer).StreamingWrite(&persQueueServiceStreamingWriteServer{stream})
}

type PersQueueService_StreamingWriteServer interface {
	Send(*Ydb_Persqueue_V1.StreamingWriteServerMessage) error
	Recv() (*Ydb_Persqueue_V1.StreamingWriteClientMessage, error)
	grpc.ServerStream
}

type persQueueServiceStreamingWriteServer struct {
	grpc.ServerStream
}

func (x *persQueueServiceStreamingWriteServer) Send(m *Ydb_Persqueue_V1.StreamingWriteServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *persQueueServiceStreamingWriteServer) Recv() (*Ydb_Persqueue_V1.StreamingWriteClientMessage, error) {
	m := new(Ydb_Persqueue_V1.StreamingWriteClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersQueueService_MigrationStreamingRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersQueueServiceServer).MigrationStreamingRead(&persQueueServiceMigrationStreamingReadServer{stream})
}

type PersQueueService_MigrationStreamingReadServer interface {
	Send(*Ydb_Persqueue_V1.MigrationStreamingReadServerMessage) error
	Recv() (*Ydb_Persqueue_V1.MigrationStreamingReadClientMessage, error)
	grpc.ServerStream
}

type persQueueServiceMigrationStreamingReadServer struct {
	grpc.ServerStream
}

func (x *persQueueServiceMigrationStreamingReadServer) Send(m *Ydb_Persqueue_V1.MigrationStreamingReadServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *persQueueServiceMigrationStreamingReadServer) Recv() (*Ydb_Persqueue_V1.MigrationStreamingReadClientMessage, error) {
	m := new(Ydb_Persqueue_V1.MigrationStreamingReadClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersQueueService_GetReadSessionsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Persqueue_V1.ReadInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersQueueServiceServer).GetReadSessionsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ydb.PersQueue.V1.PersQueueService/GetReadSessionsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersQueueServiceServer).GetReadSessionsInfo(ctx, req.(*Ydb_Persqueue_V1.ReadInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersQueueService_DescribeTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Persqueue_V1.DescribeTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersQueueServiceServer).DescribeTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ydb.PersQueue.V1.PersQueueService/DescribeTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersQueueServiceServer).DescribeTopic(ctx, req.(*Ydb_Persqueue_V1.DescribeTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersQueueService_DropTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Persqueue_V1.DropTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersQueueServiceServer).DropTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ydb.PersQueue.V1.PersQueueService/DropTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersQueueServiceServer).DropTopic(ctx, req.(*Ydb_Persqueue_V1.DropTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersQueueService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Persqueue_V1.CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersQueueServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ydb.PersQueue.V1.PersQueueService/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersQueueServiceServer).CreateTopic(ctx, req.(*Ydb_Persqueue_V1.CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersQueueService_AlterTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Persqueue_V1.AlterTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersQueueServiceServer).AlterTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ydb.PersQueue.V1.PersQueueService/AlterTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersQueueServiceServer).AlterTopic(ctx, req.(*Ydb_Persqueue_V1.AlterTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersQueueService_AddReadRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Persqueue_V1.AddReadRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersQueueServiceServer).AddReadRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ydb.PersQueue.V1.PersQueueService/AddReadRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersQueueServiceServer).AddReadRule(ctx, req.(*Ydb_Persqueue_V1.AddReadRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersQueueService_RemoveReadRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Persqueue_V1.RemoveReadRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersQueueServiceServer).RemoveReadRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ydb.PersQueue.V1.PersQueueService/RemoveReadRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersQueueServiceServer).RemoveReadRule(ctx, req.(*Ydb_Persqueue_V1.RemoveReadRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PersQueueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ydb.PersQueue.V1.PersQueueService",
	HandlerType: (*PersQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReadSessionsInfo",
			Handler:    _PersQueueService_GetReadSessionsInfo_Handler,
		},
		{
			MethodName: "DescribeTopic",
			Handler:    _PersQueueService_DescribeTopic_Handler,
		},
		{
			MethodName: "DropTopic",
			Handler:    _PersQueueService_DropTopic_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _PersQueueService_CreateTopic_Handler,
		},
		{
			MethodName: "AlterTopic",
			Handler:    _PersQueueService_AlterTopic_Handler,
		},
		{
			MethodName: "AddReadRule",
			Handler:    _PersQueueService_AddReadRule_Handler,
		},
		{
			MethodName: "RemoveReadRule",
			Handler:    _PersQueueService_RemoveReadRule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingWrite",
			Handler:       _PersQueueService_StreamingWrite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MigrationStreamingRead",
			Handler:       _PersQueueService_MigrationStreamingRead_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ydb_persqueue_v2.proto",
}

// ClusterDiscoveryServiceClient is the client API for ClusterDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterDiscoveryServiceClient interface {
	// Get PQ clusters which are eligible for the specified Write or Read Sessions
	DiscoverClusters(ctx context.Context, in *Ydb_PersQueue_ClusterDiscovery.DiscoverClustersRequest, opts ...grpc.CallOption) (*Ydb_PersQueue_ClusterDiscovery.DiscoverClustersResponse, error)
}

type clusterDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterDiscoveryServiceClient(cc grpc.ClientConnInterface) ClusterDiscoveryServiceClient {
	return &clusterDiscoveryServiceClient{cc}
}

func (c *clusterDiscoveryServiceClient) DiscoverClusters(ctx context.Context, in *Ydb_PersQueue_ClusterDiscovery.DiscoverClustersRequest, opts ...grpc.CallOption) (*Ydb_PersQueue_ClusterDiscovery.DiscoverClustersResponse, error) {
	out := new(Ydb_PersQueue_ClusterDiscovery.DiscoverClustersResponse)
	err := c.cc.Invoke(ctx, "/Ydb.PersQueue.V1.ClusterDiscoveryService/DiscoverClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterDiscoveryServiceServer is the server API for ClusterDiscoveryService service.
type ClusterDiscoveryServiceServer interface {
	// Get PQ clusters which are eligible for the specified Write or Read Sessions
	DiscoverClusters(context.Context, *Ydb_PersQueue_ClusterDiscovery.DiscoverClustersRequest) (*Ydb_PersQueue_ClusterDiscovery.DiscoverClustersResponse, error)
}

// UnimplementedClusterDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterDiscoveryServiceServer struct {
}

func (*UnimplementedClusterDiscoveryServiceServer) DiscoverClusters(ctx context.Context, req *Ydb_PersQueue_ClusterDiscovery.DiscoverClustersRequest) (*Ydb_PersQueue_ClusterDiscovery.DiscoverClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverClusters not implemented")
}

func RegisterClusterDiscoveryServiceServer(s *grpc.Server, srv ClusterDiscoveryServiceServer) {
	s.RegisterService(&_ClusterDiscoveryService_serviceDesc, srv)
}

func _ClusterDiscoveryService_DiscoverClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_PersQueue_ClusterDiscovery.DiscoverClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterDiscoveryServiceServer).DiscoverClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ydb.PersQueue.V1.ClusterDiscoveryService/DiscoverClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterDiscoveryServiceServer).DiscoverClusters(ctx, req.(*Ydb_PersQueue_ClusterDiscovery.DiscoverClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ydb.PersQueue.V1.ClusterDiscoveryService",
	HandlerType: (*ClusterDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DiscoverClusters",
			Handler:    _ClusterDiscoveryService_DiscoverClusters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ydb_persqueue_v2.proto",
}

const (
	StreamingWrite         = "/Ydb.PersQueue.V1.PersQueueService/StreamingWrite"
	MigrationStreamingRead = "/Ydb.PersQueue.V1.PersQueueService/MigrationStreamingRead"
	GetReadSessionsInfo    = "/Ydb.PersQueue.V1.PersQueueService/GetReadSessionsInfo"
	DescribeTopic          = "/Ydb.PersQueue.V1.PersQueueService/DescribeTopic"
	DropTopic              = "/Ydb.PersQueue.V1.PersQueueService/DropTopic"
	CreateTopic            = "/Ydb.PersQueue.V1.PersQueueService/CreateTopic"
	AlterTopic             = "/Ydb.PersQueue.V1.PersQueueService/AlterTopic"
	AddReadRule            = "/Ydb.PersQueue.V1.PersQueueService/AddReadRule"
	RemoveReadRule         = "/Ydb.PersQueue.V1.PersQueueService/RemoveReadRule"
	DiscoverClusters       = "/Ydb.PersQueue.V1.ClusterDiscoveryService/DiscoverClusters"
)
