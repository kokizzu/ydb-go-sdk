// Code generated by gtrace. DO NOT EDIT.

package metadata

import (
	"net"
	"time"
)

// Compose returns a new ClientTrace which has functional fields composed
// both from t and x.
func (t ClientTrace) Compose(x ClientTrace) (ret ClientTrace) {
	switch {
	case t.OnDial == nil:
		ret.OnDial = x.OnDial
	case x.OnDial == nil:
		ret.OnDial = t.OnDial
	default:
		h1 := t.OnDial
		h2 := x.OnDial
		ret.OnDial = func(d DialStartInfo) func(DialDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d DialDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	switch {
	case t.OnWriteRequest == nil:
		ret.OnWriteRequest = x.OnWriteRequest
	case x.OnWriteRequest == nil:
		ret.OnWriteRequest = t.OnWriteRequest
	default:
		h1 := t.OnWriteRequest
		h2 := x.OnWriteRequest
		ret.OnWriteRequest = func(w WriteRequestStartInfo) func(WriteRequestDoneInfo) {
			r1 := h1(w)
			r2 := h2(w)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(w WriteRequestDoneInfo) {
					r1(w)
					r2(w)
				}
			}
		}
	}
	switch {
	case t.OnReadResponse == nil:
		ret.OnReadResponse = x.OnReadResponse
	case x.OnReadResponse == nil:
		ret.OnReadResponse = t.OnReadResponse
	default:
		h1 := t.OnReadResponse
		h2 := x.OnReadResponse
		ret.OnReadResponse = func(r ReadResponseStartInfo) func(ReadResponseDoneInfo) {
			r1 := h1(r)
			r2 := h2(r)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(r ReadResponseDoneInfo) {
					r1(r)
					r2(r)
				}
			}
		}
	}
	return ret
}
func (t ClientTrace) onDial(d DialStartInfo) func(DialDoneInfo) {
	fn := t.OnDial
	if fn == nil {
		return func(DialDoneInfo) {
			return
		}
	}
	res := fn(d)
	if res == nil {
		return func(DialDoneInfo) {
			return
		}
	}
	return res
}
func (t ClientTrace) onWriteRequest(w WriteRequestStartInfo) func(WriteRequestDoneInfo) {
	fn := t.OnWriteRequest
	if fn == nil {
		return func(WriteRequestDoneInfo) {
			return
		}
	}
	res := fn(w)
	if res == nil {
		return func(WriteRequestDoneInfo) {
			return
		}
	}
	return res
}
func (t ClientTrace) onReadResponse(r ReadResponseStartInfo) func(ReadResponseDoneInfo) {
	fn := t.OnReadResponse
	if fn == nil {
		return func(ReadResponseDoneInfo) {
			return
		}
	}
	res := fn(r)
	if res == nil {
		return func(ReadResponseDoneInfo) {
			return
		}
	}
	return res
}
func clientTraceOnDial(t ClientTrace, network string, addr string) func(network string, addr string, _ net.Conn, _ error) {
	var p DialStartInfo
	p.Network = network
	p.Addr = addr
	res := t.onDial(p)
	return func(network string, addr string, c net.Conn, e error) {
		var p DialDoneInfo
		p.Network = network
		p.Addr = addr
		p.Conn = c
		p.Error = e
		res(p)
	}
}
func clientTraceOnWriteRequest(t ClientTrace, c net.Conn) func(net.Conn, error) {
	var p WriteRequestStartInfo
	p.Conn = c
	res := t.onWriteRequest(p)
	return func(c net.Conn, e error) {
		var p WriteRequestDoneInfo
		p.Conn = c
		p.Error = e
		res(p)
	}
}
func clientTraceOnReadResponse(t ClientTrace, c net.Conn) func(_ net.Conn, code string, expires time.Time, _ error) {
	var p ReadResponseStartInfo
	p.Conn = c
	res := t.onReadResponse(p)
	return func(c net.Conn, code string, expires time.Time, e error) {
		var p ReadResponseDoneInfo
		p.Conn = c
		p.Code = code
		p.Expires = expires
		p.Error = e
		res(p)
	}
}
